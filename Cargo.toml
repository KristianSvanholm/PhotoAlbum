[package]
name = "photo-album"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0"
console_log = "1.0"
rand = { version = "0.8"}
console_error_panic_hook = "0.1"
futures = "0.3"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
log = "0.4"
simple_logger = "4.0"
base64 = "0.13"
serde = { version = "1.0", features = ["derive"] }
axum = { version = "0.7", optional = true, features = ["macros"] }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
tokio = { version = "1", features = ["full"], optional = true }
http = { version = "1.0" }
sqlx = { version = "0.7.2", features = [
	"runtime-tokio-rustls",
	"sqlite",
], optional = true }
thiserror = "1.0"
wasm-bindgen = "0.2"
bcrypt = { version = "0.15", optional = true }
async-trait = { version = "0.1", optional = true }
uuid = { version = "1.7.0", features = ["v4", "fast-rng"] }
web-sys = {version = "0.3.68", features = ["FileList", "File", "HtmlInputElement"]}
gloo = {version = "0.11.0", features = ["futures"]}
leptos-use = "0.10.2"
lazy_static = "1.4.0"
axum-login = { version = "0.15.1", optional = true }
tower-sessions-sqlx-store = { version = "0.12.0", features = ["sqlite"],  optional = true }
time = { version = "0.3.30",  optional = true }
rustface = "0.1.7"
image = "0.25.1"
imageproc = "0.24.0"

[dev-dependencies]
axum-test = "14.8.0"
serde_json = "1.0.115"
futures-locks = "0.7.1"
cookie = "0.18"

[features]
default = ["ssr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
	"dep:axum",
	"dep:tower",
	"dep:tower-http",
	"dep:tokio",
	"dep:axum-login",
	"dep:tower-sessions-sqlx-store",
	"dep:time",
	"dep:async-trait",
	"dep:sqlx",
	"dep:bcrypt",
	"leptos/ssr",
	"leptos-use/ssr",
	"leptos_meta/ssr",
	"leptos_router/ssr",
	"dep:leptos_axum",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tower", "tower-http", "tokio", "sqlx", "leptos_axum"]
skip_feature_sets = [["ssr", "hydrate"]]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "photo-album"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
end2end-cmd = "npx playwright test"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
